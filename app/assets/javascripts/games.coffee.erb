# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

colorBrown = '#795548'
colorLightBrown = '#A1887F'
colorLightBlue = '#3498db'
colorGray = '#95a5a6'
colorRed = '#c0392b'
colorWhite = '#FFFFFF'
colorBlack = '#000000'

crStage = ''
ownScore = ''
enemyScore = ''

SPEED_INCREMENT = 75
SPEED_CAP = 800

assetsObj = {
  "sprites": {
    "<%= asset_path('bus_red_up_206x583.png') %>": {
      tile: 206,
      tileh: 583,
      map: {
        bus_red_up_start: [0, 0]
      }
    },
    "<%= asset_path('bus_gray_up_206x583.png') %>": {
      tile: 206,
      tileh: 583,
      map: {
        bus_gray_up_start: [0, 0]
      }
    },
    "<%= asset_path('car_white_up_476x960.png') %>": {
      tile: 476,
      tileh: 960,
      map: {
        car_white_up_start: [0, 0]
      }
    }
  }
}

Crafty.load(assetsObj, ->
  Crafty.log('Assets loaded')
)

window.onload = () ->
  initGameVariables()
  Crafty.init(crStage.width())
  initScores()
  defineCraftyScenes()
  Crafty.enterScene("game_start")

initGameVariables = ->
  crStage = $('#cr-stage')

initScores = ->
  this.ownScore = Crafty.e('Score, Persist')
  this.enemyScore = Crafty.e('EnemyScore, Persist')

defineCraftyScenes = ->
  Crafty.defineScene("game_start", ->

    Crafty.background(colorLightBrown)

    leftMargin = 5

    Crafty.e('Lane')
      .setX(leftMargin)
      .setOrder(1)

    Crafty.e('Lane')
      .setX(leftMargin + (crStage.width() * .33))
      .setOrder(2)

    Crafty.e('Lane')
      .setX(leftMargin + (crStage.width() * .66))
      .setOrder(3)

    Crafty.e('EndOfLane')
      .setY(0)
      .setCheckHitsWith('Vehicle')
      .setScoreTracker('Score')

    Crafty.e('EndOfLane')
      .setY(crStage.height())
      .setCheckHitsWith('EnemyVehicle')
      .setScoreTracker('EnemyScore')

#    resetGameStartScene()
#    Crafty.e('Score')
#    Crafty.e('EnemyScore')
    Crafty.e('Countdown')
  )

disableAddingVehicles = ->
  Crafty('Lane').each( ->
    if !this.has('LaneReady')
      this.addComponent('LaneReady')
  )
  Crafty('VehicleSelection').destroy()

startAllVehicles = ->
  Crafty('Vehicle').trigger('StartRunning')
  Crafty('EnemyVehicle').trigger('StartRunning')

addEnemyVehicles = ->
  Crafty('Lane').trigger('addEnemyVehicle')

resetGameStartScene = ->
  Crafty('Lane').each( ->
    if this.has('LaneReady')
      this.removeComponent('LaneReady', false)
  )
  Crafty.e('Countdown')

Crafty.c('Lane', {
  init: ->
    this.addComponent("2D, Canvas, Color, Button")
    this.y = 5
    this.x = 5
    this.w = crStage.width() / 3 - 10
    this.h = crStage.height() - 10
    this.color(colorBrown)

  events: {
    'Click': (MouseEvent) ->
      if !this.has('LaneReady')
        Crafty.e('VehicleSelection')
          .onSelect(this, this.setVehicle)
          .setLaneNumber(this.order)

    'addEnemyVehicle': ->
      vehicleTypes = ['Metrobus', 'Uber', 'DiabloRojo']
      randomVehicleType = vehicleTypes[Math.floor(Math.random() * vehicleTypes.length)]
      Crafty.e('EnemyVehicle')
      .setType(randomVehicleType)
      .place( this.x + (this.w / 2), this.y, false)
  }

  remove: ->
    Crafty.log('Lane was removed')

  setX: (x) ->
    this.x = x
    return this

  setOrder: (order) ->
    this.order = order
    return this

  setVehicle: (vehicleType) ->
    if !this.has('LaneReady')
      Crafty.e('Vehicle')
        .setType(vehicleType)
        .place( this.x + (this.w / 2), this.h + this.y, true)
      this.addComponent('LaneReady')
      Crafty.log('Vehicle added in lane ' + this.order)
    return this
})

Crafty.c('EndOfLane', {
  required: '2D, Canvas, Collision'

  init: ->
    this.x = 0
    this.y = ''
    this.w = crStage.width()
    this.h = 1
    this.scoreTracker = ''

  events: {
    'HitOn': (hitData) ->
      self = this
      $.each(hitData, (key, value) ->
        Crafty(self.scoreTracker).addPoint()
      )
  }

  setCheckHitsWith: (componentsList) ->
    this.checkHits(componentsList)
    return this

  setScoreTracker: (componentList) ->
    this.scoreTracker = componentList
    return this

  setY: (y) ->
    this.y = y
    return this
})

Crafty.c('Vehicle', {
  init: ->
    this.addComponent("2D, Canvas, Collision")
    this.speedIncrement = SPEED_INCREMENT
    this.speedCap = SPEED_CAP
    this.onHit('EnemyVehicle', (obj) ->
      enemyVehicle = Crafty(obj[0].obj.getId())
      playerType = this.vehicleType
      enemyType = enemyVehicle.vehicleType
      playerWins = false
      bothLose = false
      if playerType == 'Uber' and enemyType == 'Metrobus'
        playerWins = true
      else if playerType == 'Metrobus' and enemyType == 'DiabloRojo'
        playerWins = true
      else if playerType == 'DiabloRojo' and enemyType == 'Uber'
        playerWins = true
      else if playerType == enemyType
        bothLose = true

      if bothLose
        enemyVehicle.destroy()
        this.destroy()
      else
        if playerWins
          enemyVehicle.destroy()
        else
          this.destroy()
    )

  events: {
    'StartRunning': ->
      this.bind('EnterFrame', (eventData) ->
        this.y -= this.speedIncrement * (eventData.dt / 1000);
        if this.speedIncrement < this.speedCap
          this.speedIncrement += this.speedIncrement
      )
  }

  remove: ->
    Crafty.log('Vehicle was removed')

  place: (x, y, subtractVehicleHeight) ->
    this.x = x - (this.w / 2)
    this.y = y
    if subtractVehicleHeight
      this.y -= this.h
    return this

  setType: (vehicleType) ->
    switch vehicleType
      when 'Uber' then this.setUberAttributes()
      when 'Metrobus' then this.setMetrobusAttributes()
      when 'DiabloRojo' then this.setDiabloRojoAttributes()
    return this

  setUberAttributes: ->
    this.addComponent("car_white_up_start")
    this.vehicleType = 'Uber'
    this.w = Crafty('Lane').get(0).w * 0.425 #120
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this

  setMetrobusAttributes: ->
    this.addComponent("bus_gray_up_start")
    this.vehicleType = 'Metrobus'
    this.w = Crafty('Lane').get(0).w * 0.33 #90
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this

  setDiabloRojoAttributes: ->
    this.addComponent("bus_red_up_start")
    this.vehicleType = 'DiabloRojo'
    this.w = Crafty('Lane').get(0).w * 0.33 #90
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this
})

Crafty.c('EnemyVehicle', {
  init: ->
    this.addComponent("2D, Canvas")
    this.speedIncrement = SPEED_INCREMENT
    this.speedCap = SPEED_CAP

  events: {
    'StartRunning': ->
      this.bind('EnterFrame', (eventData) ->
        this.y += this.speedIncrement * (eventData.dt / 1000);
        if this.speedIncrement < this.speedCap
          this.speedIncrement += this.speedIncrement
      )
  }

  remove: ->
    Crafty.log('Vehicle was removed')

  place: (x, y, subtractVehicleHeight) ->
    this.x = x - (this.w / 2)
    this.y = y
    if subtractVehicleHeight
      this.y -= this.h
    return this

  setType: (vehicleType) ->
    switch vehicleType
      when 'Uber' then this.setUberAttributes()
      when 'Metrobus' then this.setMetrobusAttributes()
      when 'DiabloRojo' then this.setDiabloRojoAttributes()
    return this

  setUberAttributes: ->
    this.addComponent("car_white_up_start")
    this.vehicleType = 'Uber'
    this.w = Crafty('Lane').get(0).w * 0.425 #120
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this

  setMetrobusAttributes: ->
    this.addComponent("bus_gray_up_start")
    this.vehicleType = 'Metrobus'
    this.w = Crafty('Lane').get(0).w * 0.33 #90
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this

  setDiabloRojoAttributes: ->
    this.addComponent("bus_red_up_start")
    this.vehicleType = 'DiabloRojo'
    this.w = Crafty('Lane').get(0).w * 0.33 #90
    this.h = Crafty('Lane').get(0).w * 0.8 #200
    return this
})

Crafty.c('Countdown', {
  init: ->
    this.addComponent("2D, DOM, Text")
    this.css({ "text-align": "center"})
    this.text('Loading')
    this.textColor("#FFFFFF")
    this.x = 5
    this.y = 5
    this.w = 100
    this.h = 20
    this.time = 5
    this.text('Tienes ' + this.time + 's')
    this.timer = setInterval(this.countdown, 1000)

  events: {
    #'EnterFrame': ->
    #  this.y -= this.speedIncrement * (eventData.dt / 1000)
  }

  remove: ->
    Crafty.log('Countdown was removed')

  countdown: () ->
    c = Crafty('Countdown')
    if c.time <= 0
      clearInterval(c.timer)
      disableAddingVehicles()
      addEnemyVehicles()
      startAllVehicles()
      c.destroy()
    c.text('Tienes ' + c.time + 's')
    c.time -= 1
})

Crafty.c('VehicleSelection', {
  required: "2D, Canvas, Color"

  init: ->
    this.selectVehicle = ''
    this.title = Crafty.e("2D, Canvas, Text")
    this.diabloRojoOption = Crafty.e("Vehicle, Button")
    this.metroBusOption = Crafty.e("Vehicle, Button")
    this.uberOption = Crafty.e("Vehicle, Button")
    this.attach this.title, this.diabloRojoOption, this.metroBusOption, this.uberOption

    this.x = crStage.width() / 6
    this.y = 50
    this.w = crStage.width() * 2 / 3
    this.h = crStage.height() / 2
    this.color(colorGray)
    this.OptionsPositions = [
      {
        x: this.x + 0            + this.w * .33 / 2,
        y: this.y + this.h / 2},
      {
        x: this.x + this.w * .33 + this.w * .33 / 2,
        y: this.y + this.h / 2},
      {
        x: this.x + this.w * .66 + this.w * .33 / 2,
        y: this.y + this.h / 2
      }
    ]

    this.title.textColor("#FFFFFF")
    this.title.textFont({
      family: 'Architects Daughter'
      size: '1.3vw',
      weight: 'bold'
    })
    this.title.y = this.y + 10

    # Options
    this.diabloRojoOption.vehicleSelectionContainer = this
    this.diabloRojoOption.setType('DiabloRojo')
    this.diabloRojoOption.place(this.OptionsPositions[0].x,
        this.OptionsPositions[0].y + this.diabloRojoOption.h / 2,
        true)
    this.diabloRojoOption.bind("Click", (MouseEvent) ->
      this.vehicleSelectionContainer.selectVehicle('DiabloRojo')
    )

    this.metroBusOption.vehicleSelectionContainer = this
    this.metroBusOption.setType('Metrobus')
    this.metroBusOption.place(this.OptionsPositions[1].x,
        this.OptionsPositions[1].y + this.metroBusOption.h / 2,
        true)
    this.metroBusOption.bind("Click", (MouseEvent) ->
      this.vehicleSelectionContainer.selectVehicle('Metrobus')
    )

    this.uberOption.vehicleSelectionContainer = this
    this.uberOption.setType('Uber')
    this.uberOption.place(this.OptionsPositions[2].x,
        this.OptionsPositions[2].y + this.uberOption.h / 2,
        true)
    this.uberOption.bind("Click", (MouseEvent) ->
      this.vehicleSelectionContainer.selectVehicle('Uber')
    )

  remove: ->
    Crafty.log('VehicleSelection was removed')

  # Assign the function that will be called, passing the selected value, once a car is selected
  onSelect: (laneObject, callback) ->
    this.selectVehicle = (vehicleType) ->
      callback.apply(laneObject, [vehicleType])
      Crafty('VehicleSelection').destroy()
    return this

  setLaneNumber: (laneNumber) ->
    this.title.text('¡ ELIGE TU TRANSPORTE PARA EL CARRIL ' + laneNumber + ' !')
    this.title.x = this.x + this.w / 2 - this.title.w / 2
    return this
})

Crafty.c('Score', {
  init: ->
    this.addComponent("2D, DOM, Text")
    this.text('Loading')
    this.textColor("#FFFFFF")
    this.x = crStage.width() / 2
    this.y = 5
    this.w = 300
    this.h = 20
    this.score = 0
    this.text('Te llevaste: ' + this.score + ' vehículos!')

  events: {
  }

  remove: ->
    Crafty.log('Score was removed')

  addPoint: ->
    this.score += 1
    this.text('Te llevaste: ' + this.score + ' vehículos!')
})

Crafty.c('EnemyScore', {
  init: ->
    this.addComponent("2D, DOM, Text")
    this.text('Loading')
    this.textColor("#FFFFFF")
    this.x = crStage.width() / 2
    this.y = 25
    this.w = 300
    this.h = 20
    this.score = 0
    this.text('Te arrollaron: ' + this.score + ' veces')

  events: {
  }

  remove: ->
    Crafty.log('Score was removed')

  addPoint: ->
    this.score += 1
    this.text('Te arrollaron: ' + this.score + ' veces')
})